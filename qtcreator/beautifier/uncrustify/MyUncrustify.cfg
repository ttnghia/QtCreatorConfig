#
# My favorite format
#
indent_class            = true
indent_with_tabs		= 0		# 1=indent to level only, 2=indent with tabs
input_tab_size			= 8		# original tab size
output_tab_size			= 4		# new tab size
indent_columns			= output_tab_size
indent_label			= 2		# pos: absolute col, neg: relative column
indent_align_string		= true		# align broken strings
indent_brace			= 0

nl_enum_brace			= add		# "enum {" vs "enum \n {"
nl_union_brace			= add		# "union {" vs "union \n {"
nl_struct_brace			= add		# "struct {" vs "struct \n {"
nl_do_brace			= remove		# "do {" vs "do \n {"
nl_if_brace			= remove		# "if () {" vs "if () \n {"
nl_for_brace			= remove		# "for () {" vs "for () \n {"
nl_else_brace			= remove		# "else {" vs "else \n {"
nl_while_brace			= remove		# "while () {" vs "while () \n {"
nl_switch_brace			= remove		# "switch () {" vs "switch () \n {"
#nl_func_var_def_blk		= 1
# nl_before_case			= 1
nl_fcall_brace			= add		# "foo() {" vs "foo()\n{"
nl_fdef_brace			= add		# "int foo() {" vs "int foo()\n{"
# nl_after_return			= TRUE


# Add or remove newline between '}' and 'while' of 'do' statement
nl_brace_while			= remove

# Add or remove newline between '}' and 'else'
nl_brace_else			= remove


# Add or remove newline between 'else if' and '{'
# If set to ignore, nl_if_brace is used instead
nl_elseif_brace                 = remove   # ignore/add/remove/force

# Whether to remove blanks after '#ifxx' and '#elxx', or before '#elxx' and '#endif'. Does not affect top-level #ifdefs.
nl_squeeze_ifdef		= false

# Add or remove newline between '}' and ')' in a function invocation
nl_brace_fparen         = ignore

# Control the newline between the close brace and 'b' in: 'struct { int a; } b;'
# Affects enums, unions, and structures. If set to ignore, uses nl_after_brace_close
nl_brace_struct_var                       = remove   # ignore/add/remove/force


# mod_paren_on_return		= add		# "return 1;" vs "return (1);"
mod_full_brace_if		= force		# "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_for		= force		# "for () a--;" vs "for () { a--; }"
mod_full_brace_do		= force		# "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while	= force		# "while (a) a--;" vs "while (a) { a--; }"

# Add or remove space between 'else' and '{' if on the same line
sp_else_brace                   = force   # ignore/add/remove/force

# Add or remove space between '}' and 'else' if on the same line
sp_brace_else                   = force   # ignore/add/remove/force

sp_before_semi			= remove
sp_paren_paren			= remove	# space between (( and ))
sp_return_paren			= force	# "return (1);" vs "return(1);"
sp_sizeof_paren			= remove	# "sizeof (int)" vs "sizeof(int)"
sp_before_sparen		= remove		# "if (" vs "if("
sp_after_sparen			= force		# "if () {" vs "if (){"
sp_after_cast			= remove		# "(int) a" vs "(int)a"
sp_inside_braces		= force		# "{ 1 }" vs "{1}"
sp_inside_braces_struct		= force		# "{ 1 }" vs "{1}"
sp_inside_braces_enum		= force		# "{ 1 }" vs "{1}"
sp_inside_paren			= remove
sp_inside_fparen		= remove
sp_inside_sparen		= remove
#sp_type_func			= ignore
sp_assign			= force
sp_arith			= force
sp_bool				= force
sp_compare			= force
sp_after_comma			= add
sp_func_def_paren		= remove	# "int foo (){" vs "int foo(){"
sp_func_call_paren		= remove	# "foo (" vs "foo("
sp_func_proto_paren		= remove	# "int foo ();" vs "int foo();"

# Add or remove space between ')' and '{' of function
sp_fparen_brace                 = force   # ignore/add/remove/force

# Add or remove space between ')' and '{'
sp_paren_brace                  = add   # ignore/add/remove/force


align_with_tabs			= FALSE		# use tabs to align
align_on_tabstop		= FALSE		# align on tabstops
align_enum_equ_span		= 4

# Whether to align macros wrapped with a backslash and a newline.
# This will not work right if the macro contains a multi-line comment.
align_nl_cont			= TRUE

align_var_def_span		= 1

align_var_def_star_style	= 0
align_var_def_colon		= TRUE
align_struct_init_span		= 0

# align_struct_init_span		= 3 cause issue: adding space each time saving document









align_var_struct_span		= 1
align_right_cmt_span		= 3
align_pp_define_span		= 3
align_pp_define_gap		= 1
align_number_left		= TRUE
align_typedef_span		= 5
align_typedef_gap		= 3


# The span for aligning class (0=don't align)
align_var_class_span            = 1        # number

# The threshold for aligning class member definitions (0=no limit)
align_var_class_thresh          = 0        # number

# The gap for aligning class member definitions
align_var_class_gap             = 0        # number


# cmt_star_cont			= TRUE

eat_blanks_before_close_brace	= TRUE
eat_blanks_after_open_brace	= TRUE





# Align variable definitions in prototypes and functions
align_func_params                         = true     # false/true

# Align parameters in single-line functions that have the same name.
# The function names must already be aligned with each other.
#align_same_func_call_params               = true    # false/true


# How to align the '&' in variable definitions.
#  0=Part of the type
#  1=Part of the variable
#  2=Dangling
align_var_def_amp_style                   = 0        # number

# The threshold for aligning variable definitions (0=no limit)
align_var_def_thresh                      = 0       # number

# The gap for aligning variable definitions
align_var_def_gap                         = 0        # number


# Whether to align any attribute after the variable name
align_var_def_attribute                   = true    # false/true


# The span for aligning on '=' in assignments (0=don't align)
align_assign_span                         = 1        # number

# The threshold for aligning on '=' in assignments (0=no limit)
align_assign_thresh                       = 0 #12       # number


# The threshold for aligning on '=' in enums (0=no limit)
align_enum_equ_thresh                     = 0        # number

# The span for aligning struct/union (0=don't align)
# align_var_struct_span                     = 99       # number

# The threshold for aligning struct/union member definitions (0=no limit)
align_var_struct_thresh                   = 0        # number

# The gap for aligning struct/union member definitions
align_var_struct_gap                      = 0        # number

# How to align typedef'd functions with other typedefs
# 0: Don't mix them at all
# 1: align the open paren with the types
# 2: align the function type name with the other type names
align_typedef_func                        = 0        # number

# Controls the positioning of the '*' in typedefs. Just try it.
# 0: Align on typedef type, ignore '*'
# 1: The '*' is part of type name: typedef int  *pint;
# 2: The '*' is part of the type, but dangling: typedef int *pint;
align_typedef_star_style                  = 1        # number

# Controls the positioning of the '&' in typedefs. Just try it.
# 0: Align on typedef type, ignore '&'
# 1: The '&' is part of type name: typedef int  &pint;
# 2: The '&' is part of the type, but dangling: typedef int &pint;
align_typedef_amp_style                   = 0        # number

# The span for aligning comments that end lines (0=don't align)
align_right_cmt_span                      = 3        # number

# If aligning comments, mix with comments after '}' and #endif with less than 3 spaces before the comment
align_right_cmt_mix                       = false    # false/true

# If a trailing comment is more than this number of columns away from the text it follows,
# it will qualify for being aligned. This has to be > 0 to do anything.
align_right_cmt_gap                       = 0        # number

# Align trailing comment at or beyond column N; 'pulls in' comments as a bonus side effect (0=ignore)
align_right_cmt_at_col                    = 0        # number

# The span for aligning function prototypes (0=don't align)
align_func_proto_span                     = 1        # number

# Minimum gap between the return type and the function name.
align_func_proto_gap                      = 1        # number

# Align function protos on the 'operator' keyword instead of what follows
align_on_operator                         = false    # false/true

# Whether to mix aligning prototype and variable declarations.
# If true, align_var_def_XXX options are used instead of align_func_proto_XXX options.
align_mix_var_proto                       = false    # false/true

# Align single-line functions with function prototypes, uses align_func_proto_span
align_single_line_func                    = true    # false/true

# Aligning the open brace of single-line functions.
# Requires align_single_line_func=true, uses align_func_proto_span
align_single_line_brace                   = false    # false/true

# Gap for align_single_line_brace.
align_single_line_brace_gap               = 0        # number

# The span for aligning ObjC msg spec (0=don't align)
align_oc_msg_spec_span                    = 0        # number


# # Align macro functions and variables together
align_pp_define_together                  = false    # false/true

# Align lines that start with '<<' with previous '<<'. Default=true
align_left_shift                          = true     # false/true

# Align text after asm volatile () colons.
align_asm_colon                           = true     # false/true

# Span for aligning parameters in an Obj-C message call on the ':' (0=don't align)
align_oc_msg_colon_span                   = 0        # number

# If true, always align with the first parameter, even if it is too short.
align_oc_msg_colon_first                  = false    # false/true

# Aligning parameters in an Obj-C '+' or '-' declaration on the ':'
align_oc_decl_colon                       = false    # false/true


# Spaces to indent 'case' from 'switch'
# Usually 0 or indent_columns.
indent_switch_case              = 4        # number

nl_collapse_empty_body          = true
sp_template_angle = Remove
sp_before_angle = Remove
sp_inside_angle = Remove


# Double the indent for indent_func_xxx_param options
indent_func_param_double        = true     # false/true

# Controls the indent of a close paren after a newline.
# 0: Indent to body level
# 1: Align under the open paren
# 2: Indent to the brace level
indent_paren_close              = 0        # unsigned number


# The number of spaces to indent a continued '->' or '.'
# Usually set to 0, 1, or indent_columns.
indent_member                             = indent_columns        # number

# Add or remove space before pointer star '*'
sp_before_ptr_star                        = remove    # ignore/add/remove/force

# Add or remove space after pointer star '*', if followed by a word.
sp_after_ptr_star                         = force   # ignore/add/remove/force


# Add or remove space between pointer stars '*'
sp_between_ptr_star                       = remove   # ignore/add/remove/force


# Add or remove space in 'template <' vs 'template<'.
# If set to ignore, sp_before_angle is used.
sp_template_angle                         = remove   # ignore/add/remove/force

# Add or remove space before '<>'
sp_before_angle                           = remove   # ignore/add/remove/force

# Add or remove space inside '<' and '>'
sp_inside_angle                           = remove   # ignore/add/remove/force

# Add or remove space after '<>'
sp_after_angle                            = force    # ignore/add/remove/force

# Add or remove space between '<>' and '(' as found in 'new List<byte>();'
sp_angle_paren                            = remove   # ignore/add/remove/force

# Add or remove space between '<>' and a word as in 'List<byte> m;' or 'template <typename T> static ...'
sp_angle_word                             = force   # ignore/add/remove/force

# Add or remove space between '>' and '>' in '>>' (template stuff C++/C# only). Default=Add
sp_angle_shift                            = remove      # ignore/add/remove/force



# Add or remove space before a reference sign '&'
sp_before_byref                           = remove   # ignore/add/remove/force

# Add or remove space before a reference sign '&' that isn't followed by a variable name
# If set to 'ignore', sp_before_byref is used instead.
sp_before_unnamed_byref                   = ignore   # ignore/add/remove/force

# Add or remove space after reference sign '&', if followed by a word.
sp_after_byref                            = force    # ignore/add/remove/force

# Add or remove space after a reference sign '&', if followed by a func proto/def.
sp_after_byref_func                       = ignore   # ignore/add/remove/force

# Add or remove space before a reference sign '&', if followed by a func proto/def.
sp_before_byref_func                      = ignore   # ignore/add/remove/force


# indent = false == align to parenthesis
indent_func_call_param  = false
indent_func_def_param   = false
indent_func_proto_param = false


# Newline count after function body
nl_after_func_body                      = 2             # number

# Newline count after single-line function body
nl_after_func_body_one_liner            = 0             # number


indent_cpp_lambda_body = true

# Add or remove newline between C++11 lambda signature and '{'
nl_cpp_ldef_brace               = force   # ignore/add/remove/force



# Don't split one-line braced assignments - 'foo_t f = { 1, 2 };'
nl_assign_leave_one_liners      = true    # false/true

# Don't split one-line braced statements inside a class xx { } body
nl_class_leave_one_liners       = false    # false/true

# Don't split one-line enums: 'enum foo { BAR = 15 };'
nl_enum_leave_one_liners        = true    # false/true

# Don't split one-line get or set functions
nl_getset_leave_one_liners      = true    # false/true

# Don't split one-line function definitions - 'int foo() { return 0; }'
nl_func_leave_one_liners        = true    # false/true

# Don't split one-line C++11 lambdas - '[]() { return 0; }'
nl_cpp_lambda_leave_one_liners  = true    # false/true

# Don't split one-line if/else statements - 'if(a) b++;'
nl_if_leave_one_liners          = true    # false/true

# Don't split one-line while statements - 'while(a) b++;'
nl_while_leave_one_liners       = true    # false/true

# Don't split one-line OC messages
nl_oc_msg_leave_one_liner       = true    # false/true